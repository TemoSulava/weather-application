{"version":3,"sources":["components/CitySelector.js","hooks/UseFetch.js","apis/config.js","components/WeatherCard.js","components/WeatherList.js","App.js","reportWebVitals.js","index.js"],"names":["CitySelector","onSearch","useState","city","setCity","Row","Col","xs","FormControl","placeholder","onChange","event","target","value","Button","onClick","UseFetch","initialUrl","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","useEffect","fetch","then","response","json","cod","message","catch","API_KEY","WeatherCard","dt","temp_min","temp_max","main","icon","date","Date","Card","Img","variant","src","Body","Title","toLocaleDateString","toLocaleTimeString","WeatherList","weathers","map","weather","App","Container","className","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5b31420.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Row, Col, FormControl, Button } from \"react-bootstrap\";\r\n\r\nconst CitySelector = ({ onSearch }) => {\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <h1>Search your city</h1>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row>\r\n        <Col xs={4}>\r\n          <FormControl\r\n            placeholder=\"Enter city\"\r\n            onChange={(event) => setCity(event.target.value)}\r\n            value={city}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row>\r\n        <Col>\r\n          {/* don't forget to edit our function  */}\r\n          <Button onClick={() => onSearch(city)}>Check Weather</Button>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CitySelector;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst UseFetch = (initialUrl) => {\r\n  // create state variables\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(null);\r\n  const [url, setUrl] = useState(initialUrl);\r\n\r\n  useEffect(() => {\r\n    if (!url) return;\r\n    setIsLoading(true);\r\n    // clear old search\r\n    setData(null);\r\n    setError(null);\r\n\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // error handling for nonexistent data\r\n        setIsLoading(false);\r\n        if (data.cod >= 400) {\r\n          setError(data.message);\r\n          return;\r\n        }\r\n        setData(data);\r\n      })\r\n      .catch((error) => {\r\n        setIsLoading(false);\r\n        setError(error);\r\n      });\r\n  }, [url]);\r\n\r\n  return { data, error, isLoading, setUrl };\r\n};\r\n\r\nexport default UseFetch;\r\n","export const API_KEY = ['b913524fcf7faac92ca77af8c9502fdf'];\r\nexport const API_BASE_URL = \"http://api.openweathermap.org/\";","import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nconst WeatherCard = ({ dt, temp_min, temp_max, main, icon }) => {\r\n  // create a date object with Date class constructor\r\n  const date = new Date(dt);\r\n  return (\r\n    <Card>\r\n      <Card.Img\r\n        variant=\"top\"\r\n        // get the src from example url and pass the icon prop for icon code\r\n        src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n      />\r\n      <Card.Body>\r\n        <Card.Title>{main}</Card.Title>\r\n        {/*  datetime is received in milliseconds, let's turn into local date time */}\r\n        <p>\r\n          {date.toLocaleDateString()} - {date.toLocaleTimeString()}\r\n        </p>\r\n        {/* minimum temperature */}\r\n        <p>Min: {temp_min}</p>\r\n        {/* maximum temperature */}\r\n        <p>Max: {temp_max}</p>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport WeatherCard from \"./WeatherCard\";\r\n\r\nconst WeatherList = ({ weathers }) => {\r\n  return (\r\n    <Row>\r\n      {weathers.map(({ dt, main, weather }) => (\r\n        <Col key={dt}>\r\n          <WeatherCard\r\n            temp_max={main.temp_max}\r\n            temp_min={main.temp_min}\r\n            dt={dt * 1000}\r\n            main={weather[0].main}\r\n            icon={weather[0].icon}\r\n          />\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default WeatherList;\r\n","import React from \"react\";\nimport CitySelector from \"./components/CitySelector\";\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\nimport UseFetch from \"./hooks/UseFetch\";\nimport { API_KEY, API_BASE_URL } from \"./apis/config\";\nimport WeatherList from \"./components/WeatherList\";\n\nconst App = () => {\n  const {data, error, isLoading, setUrl} = UseFetch();\n\n// error handling and loading\n  const getContent = () => {\n    if(error) return <h2>Error when fetching: {error}</h2>\n    if(!data && isLoading) return <h2>LOADING...</h2>\n    if(!data) return null;\n    return <WeatherList weathers={data.list} />\n  };\n\n  return (\n    <Container className=\"App\">\n      <CitySelector onSearch={(city) => setUrl(`${API_BASE_URL}/data/2.5/forecast?q=${city}&cnt=5&appid=${API_KEY}`)} />\n\n      {/* don't forget the change */}\n      {getContent()}\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}